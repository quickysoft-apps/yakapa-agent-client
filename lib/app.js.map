{"version":3,"sources":["../src/app.js"],"names":["path","fs","EVENT_PREFIX","RESULT_STORED","server","agentClient","listen","emitter","on","console","info","now","tag","sender","message","from","date","jsonMessage","JSON","parse","rootPath","join","__dirname","existsSync","mkdirSync","filename","extractor","unlock","result","newData","timestamp","slice","incomingDataFrame","DataFrame","count","days","last","Date","getTime","start","existingData","readFileSync","parseJSON","where","x","toJSON","tail","toArray","log","end","summary","existingDataFrame","storingDataFrame","concat","asJSON","writeFileSync","storedMessage","emit","stringify","error","warn"],"mappings":"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","file":"app.js","sourcesContent":["import Server from './server'\nimport AgentClient from './agentClient'\nimport Common from './common'\n\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport perfy from 'perfy'\nimport { lock } from 'ki1r0y.lock'\nimport dataForge from 'data-forge'\n\nconst EVENT_PREFIX = 'yakapa'\nconst RESULT_STORED = `${EVENT_PREFIX}/resultStored`\n\nconst server = new Server(true)\nconst agentClient = new AgentClient()\n\nserver.listen()\n\nagentClient.emitter.on('connected', () => {\n\tconsole.info(Common.now(), 'Storage connectÃ© avec le tag', agentClient.tag)\n})\n\nagentClient.emitter.on('result', (sender, message, from, date) => {\n\tconsole.info(Common.now(), 'Storing result', message, 'from', from)\n\tconst jsonMessage = JSON.parse(message)\n\tconst rootPath = path.join(__dirname, '..', '..', 'storage', from);\t\n\tif (!fs.existsSync(rootPath)) {\n\t\tfs.mkdirSync(rootPath)\n\t}\t\n\tconst filename = path.join(rootPath, `${jsonMessage.extractor}.json`)\n\tlock(filename, function(unlock) {\t\t\n\t\ttry {\n\t\t\tconst { result } = jsonMessage\t\t\t\n\t\t\tconst newData = [\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\ttimestamp: date.slice(0,19)+'.000Z',\n\t\t\t\t\tresult\n\t\t\t\t}\n\t\t\t]\n\t\t\tconst incomingDataFrame = new dataForge.DataFrame(newData)\n\t\t\t\t\t\t\n\t\t\tif (fs.existsSync(filename)) {\n\t\t\t\tconst count = 10000 //related to extractor\n\t\t\t\tconst days = 3 //related to extractor\n\t\t\t\tconst last = new Date(new Date().getTime() - (days * 24 * 60 * 60 * 1000));\n\t\t\t\tperfy.start('process file')\n\t\t\t\tconst existingData = new dataForge.readFileSync(filename)\n\t\t\t\t\t.parseJSON()\n\t\t\t\t\t.where(x => x.timestamp > last.toJSON())\n\t\t\t\t\t.tail(count - 1)\n\t\t\t\t\t.toArray()\n\t\t\t\tconsole.log(perfy.end('process file').summary)\n\t\t\t\tconst existingDataFrame = new dataForge.DataFrame(existingData)\n\t\t\t\tconst storingDataFrame = existingDataFrame.concat(incomingDataFrame)\n\t\t\t\tperfy.start('write file')\n\t\t\t\tstoringDataFrame.asJSON().writeFileSync(filename);\n\t\t\t\tconsole.log(perfy.end('write file').summary)\n\t\t\t} else {\n\t\t\t\tincomingDataFrame.asJSON().writeFileSync(filename);\n\t\t\t}\n\t\t\t\n\t\t\tconsole.info(Common.now(), 'Result storage done for', from)\n\t\t\tconst storedMessage = { from, extractor: jsonMessage.extractor }\n\t\t\tsender.emit(RESULT_STORED, JSON.stringify(storedMessage))\n\t\t} \n\t\tcatch(error) {\t\t\t\n\t\t\tconsole.warn(Common.now(), 'Result storage failed for', from, error)\n\t\t}\n\t\tfinally {\n\t\t\tunlock()\n\t\t}\n\t});\n})"]}